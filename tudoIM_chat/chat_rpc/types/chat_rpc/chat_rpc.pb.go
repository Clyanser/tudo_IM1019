// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.0
// source: chat_rpc.proto

package chat_rpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserChatRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SendUserId    uint32                 `protobuf:"varint,1,opt,name=send_user_id,json=sendUserId,proto3" json:"send_user_id,omitempty"` // 发送方用户id
	RevUserId     uint32                 `protobuf:"varint,2,opt,name=rev_user_id,json=revUserId,proto3" json:"rev_user_id,omitempty"`    // 接收方用户id
	Msg           []byte                 `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`                                    // 消息体 对应的 Msg类型  MsgType 在msg里面有备份 MsgPreview 是通过msg算出来的
	SystemMsg     []byte                 `protobuf:"bytes,4,opt,name=system_msg,json=systemMsg,proto3" json:"system_msg,omitempty"`       //系统消息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserChatRequest) Reset() {
	*x = UserChatRequest{}
	mi := &file_chat_rpc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChatRequest) ProtoMessage() {}

func (x *UserChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_rpc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChatRequest.ProtoReflect.Descriptor instead.
func (*UserChatRequest) Descriptor() ([]byte, []int) {
	return file_chat_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *UserChatRequest) GetSendUserId() uint32 {
	if x != nil {
		return x.SendUserId
	}
	return 0
}

func (x *UserChatRequest) GetRevUserId() uint32 {
	if x != nil {
		return x.RevUserId
	}
	return 0
}

func (x *UserChatRequest) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *UserChatRequest) GetSystemMsg() []byte {
	if x != nil {
		return x.SystemMsg
	}
	return nil
}

type UserChatResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserChatResponse) Reset() {
	*x = UserChatResponse{}
	mi := &file_chat_rpc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChatResponse) ProtoMessage() {}

func (x *UserChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_rpc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChatResponse.ProtoReflect.Descriptor instead.
func (*UserChatResponse) Descriptor() ([]byte, []int) {
	return file_chat_rpc_proto_rawDescGZIP(), []int{1}
}

var File_chat_rpc_proto protoreflect.FileDescriptor

const file_chat_rpc_proto_rawDesc = "" +
	"\n" +
	"\x0echat_rpc.proto\x12\buser_rpc\"\x84\x01\n" +
	"\x0fUserChatRequest\x12 \n" +
	"\fsend_user_id\x18\x01 \x01(\rR\n" +
	"sendUserId\x12\x1e\n" +
	"\vrev_user_id\x18\x02 \x01(\rR\trevUserId\x12\x10\n" +
	"\x03msg\x18\x03 \x01(\fR\x03msg\x12\x1d\n" +
	"\n" +
	"system_msg\x18\x04 \x01(\fR\tsystemMsg\"\x12\n" +
	"\x10UserChatResponse2I\n" +
	"\x04Chat\x12A\n" +
	"\bUserChat\x12\x19.user_rpc.UserChatRequest\x1a\x1a.user_rpc.UserChatResponseB\fZ\n" +
	"./chat_rpcb\x06proto3"

var (
	file_chat_rpc_proto_rawDescOnce sync.Once
	file_chat_rpc_proto_rawDescData []byte
)

func file_chat_rpc_proto_rawDescGZIP() []byte {
	file_chat_rpc_proto_rawDescOnce.Do(func() {
		file_chat_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chat_rpc_proto_rawDesc), len(file_chat_rpc_proto_rawDesc)))
	})
	return file_chat_rpc_proto_rawDescData
}

var file_chat_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_chat_rpc_proto_goTypes = []any{
	(*UserChatRequest)(nil),  // 0: user_rpc.UserChatRequest
	(*UserChatResponse)(nil), // 1: user_rpc.UserChatResponse
}
var file_chat_rpc_proto_depIdxs = []int32{
	0, // 0: user_rpc.Chat.UserChat:input_type -> user_rpc.UserChatRequest
	1, // 1: user_rpc.Chat.UserChat:output_type -> user_rpc.UserChatResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_chat_rpc_proto_init() }
func file_chat_rpc_proto_init() {
	if File_chat_rpc_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chat_rpc_proto_rawDesc), len(file_chat_rpc_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chat_rpc_proto_goTypes,
		DependencyIndexes: file_chat_rpc_proto_depIdxs,
		MessageInfos:      file_chat_rpc_proto_msgTypes,
	}.Build()
	File_chat_rpc_proto = out.File
	file_chat_rpc_proto_goTypes = nil
	file_chat_rpc_proto_depIdxs = nil
}
